const float poisson_table[18] = {
		0.007862935f, 0.1915329f,
		-0.2005593f, 0.7925976f,
		-0.6711889f, 0.5317522f,
		-0.2714615f, -0.562771f,
		-0.4523138f, -0.04493545f,
		0.3200973f, -0.4987137f,
		0.7931406f, 0.4579287f,
		0.3831475f, 0.8574728f,
		0.6333998f, -0.05667673f};

uniform float z_bias          = 0.0;
uniform float norm_bias_scale = 10.0;
uniform float shad_bias_scale = 1.0;
uniform float sm_scale0, sm_scale1;

#ifdef ENABLE_CASCADED_SHADOW_MAPS

#define NUM_CASCADES 4

uniform float cascade_plane_distances[NUM_CASCADES];
uniform sampler2DArray sm_tex0, sm_tex1;
uniform mat4 smap_matrix0[NUM_CASCADES], smap_matrix1[NUM_CASCADES];

int get_cascade_layer(in vec4 pos) { // pos is in eye space
	float depth = abs(pos.z);
	int layer   = NUM_CASCADES-1; // value to return if none of the depth tests pass

	for (int i = 0; i < NUM_CASCADES; ++i) {
		if (depth < cascade_plane_distances[i]) {layer = i; break;}
	}
	return layer;
}

// pos, normal, and lpos are in eye space
float get_shadow_map_weight(in vec4 pos, in vec3 normal, in float sm_scale, in int light_ix, in sampler2DArray sm_tex, in vec3 lpos) {
	int layer = get_cascade_layer(pos);
	mat4 light_space_matrix;
	if (light_ix == 0) {light_space_matrix = smap_matrix0[layer];}
	else               {light_space_matrix = smap_matrix1[layer];} // assumes light_ix == 1
	vec4 ws_pos = inverse(fg_ModelViewMatrix) * pos; // Note: vpos is in world space, but may not be present, so calculate world space pos inefficiently
	vec4 pos_light_space = light_space_matrix * ws_pos;
	vec3 proj_coords = pos_light_space.xyz / pos_light_space.w; // perform perspective divide
	proj_coords = proj_coords * 0.5 + 0.5; // transform to [0,1] range
	// get depth of current fragment from light's perspective
	float depth = proj_coords.z;
	if (depth > 1.0) return 1.0; // outside shadow frustum
	// calculate bias (based on depth map resolution and slope)
	float bias = max(0.05 * (1.0 - dot(normal, normalize(lpos))), 0.005);
	bias *= 1 / (cascade_plane_distances[layer] * 0.5f);
	depth -= 0.1*bias;
#ifndef NO_SHADOW_PCF
	vec2 texel_size = 1.0 / vec2(textureSize(sm_tex, 0));
	float ret = 0.0;

	for (int i = 0; i < 9; ++i) {
		float sample_depth = texture(sm_tex, vec3((proj_coords.xy + vec2(poisson_table[2*i], poisson_table[2*i+1]) * texel_size), layer)).r;
        ret += ((depth < sample_depth) ? 1.0 : 0.0);
	}
	ret = ret/9.0; // 9-tap PCF
#else
	float sample_depth = texture(sm_tex, vec3(proj_coords.xy, layer)).r;
	float ret = ((depth < sample_depth) ? 1.0 : 0.0);
#endif
	return max(sm_scale, 0.0)*ret - min(sm_scale, 0.0);
}
//float get_shadow_map_weight_light0_no_bias(in vec4 pos) {} // used for smoke dlights; not supported for CSMs

float get_shadow_map_weight_light0(in vec4 pos, in vec3 normal) {
	return get_shadow_map_weight(pos, normal, sm_scale0, 0, sm_tex0, fg_LightSource[0].position.xyz);
}
float get_shadow_map_weight_light1(in vec4 pos, in vec3 normal) {
	return get_shadow_map_weight(pos, normal, sm_scale1, 1, sm_tex1, fg_LightSource[1].position.xyz);
}

#else // normal shadow map

uniform sampler2DShadow sm_tex0, sm_tex1;
uniform mat4 smap_matrix0, smap_matrix1;

float calc_shadow_pcf(in sampler2DShadow sm_tex, in vec4 shadow_coord) {
	vec2 texel_size = shadow_coord.w / vec2(textureSize(sm_tex, 0));
	float ret = 0.0;
	for (int i = 0; i < 9; ++i) {
		ret += textureProj(sm_tex, (shadow_coord + vec4(texel_size.x*poisson_table[2*i], texel_size.y*poisson_table[2*i+1], 0, 0)));
	}
	return ret/9.0; // 9-tap PCF
}

// pos, normal, and lpos are in eye space
float get_shadow_map_weight(in vec4 pos, in vec3 normal, in float sm_scale, in mat4 matrix, in sampler2DShadow sm_tex, in vec3 lpos) {
#ifdef DYNAMIC_SMAP_BIAS
	float v  = clamp(dot(normal, normalize(lpos)), 0.05, 1.0); // NdotL
	pos.xyz += norm_bias_scale*(sqrt(1.0 - v*v)/v)*z_bias*normal; // tan(acos(v))
#else
	pos.xyz += norm_bias_scale*z_bias*normal;
	//pos.xyz += norm_bias_scale*z_bias*normalize(fg_ModelViewMatrixInverse[3].xyz - pos.xyz); // world space view vector
#endif // DYNAMIC_SMAP_BIAS
	vec4 shadow_coord = matrix * pos;
	shadow_coord.z += -shad_bias_scale*z_bias*shadow_coord.w;
	// sm_scale==1.0 => use smap; sm_scale==0.0 => return 0.0; sm_scale==-1.0 => return 1.0
#ifndef NO_SHADOW_PCF
	float ret = calc_shadow_pcf(sm_tex, shadow_coord);
#else
	float ret = textureProj(sm_tex, shadow_coord);
#endif
	// for exponential shadow map, disable the call to set_shadow_tex_params() in C++ and change sampler2DShadow to sampler2D
	//ret = exp(min(0.0, 500.0*(texture(sm_tex, shadow_coord.xy/shadow_coord.w).r - (shadow_coord.z/shadow_coord.w - z_bias))));
	return max(sm_scale, 0.0)*ret - min(sm_scale, 0.0);
}

float get_shadow_map_weight_light0_no_bias(in vec4 pos) { // used for smoke dlights
	//return sm_scale0*calc_shadow_pcf(sm_tex0, (smap_matrix0 * pos));
	return sm_scale0*textureProj(sm_tex0, (smap_matrix0 * pos));
}
float get_shadow_map_weight_light0(in vec4 pos, in vec3 normal) {
	return get_shadow_map_weight(pos, normal, sm_scale0, smap_matrix0, sm_tex0, fg_LightSource[0].position.xyz);
}
float get_shadow_map_weight_light1(in vec4 pos, in vec3 normal) {
	return get_shadow_map_weight(pos, normal, sm_scale1, smap_matrix1, sm_tex1, fg_LightSource[1].position.xyz);
}

#endif // normal shadow maps

vec4 add_light_comp_pos_smap_light0(in vec3 normal, in vec4 epos) {
	if (use_shadow_map) {normal *= get_shadow_map_weight_light0(epos, normal);}
	return add_light_comp_pos0(normal, epos);
}
vec4 add_light_comp_pos_smap_light1(in vec3 normal, in vec4 epos) {
	if (use_shadow_map) {normal *= get_shadow_map_weight_light1(epos, normal);}
	return add_light_comp_pos1(normal, epos);
}
